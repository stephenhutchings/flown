extends /_/layouts/default

include /_/mixins/color

block body
  section.pb3(class=[
    flag.size.output > 10000 ? "large" : ""
  ])
    .head
      h2= flag.name
      span.emoji= flag.emoji

    if !flag.isValid
      .invalid.pb3
        :md
          Warning: This flag does not yet meet the criteria for this project. It has not yet been redrawn. See the [todo list](/todo).

    .fx.pb3.gap
      each type in ["source", "recolored"]
        a.flag(href=`/assets/img/flags/${type}/${flag.slug}.svg` data-type=type)
          img(
            width=600
            src=`/assets/img/flags/${type}/${flag.slug}.svg`
          )

    .info
      code.code.nano= flag.a2

      if flag.a3
        code.code.nano= flag.a3

      dl
        dt Size
        if flag.size.output > 1024
          dd= (flag.size.output / 1024).toFixed(1)
            span.mt kB
        else
          dd= flag.size.output
            span.mt B

        if flag.size
          dt Reduction
          dd(title="Size reduction compared to source SVG")
            = (100 / flag.size.compression).toFixed(1)
            span.mt &times; smaller

        if flag.ratio
          dt Ratio
          dd(title="Original ratio")
            = flag.ratio

      a(href=flag.info target="_blank") Wikipedia

  if notes && notes[flag.slug]
    ul
      each note in notes[flag.slug]
        li= note

  if flag.colors
    ul.fx.fxw.gap
      each i in flag.colors
        li
          +color(palette[i])

  p.pb3
    if sameColors.length > 0
      | This colour palette is also used by
      for other, i in sameColors
        = i === 0 ? " " : i === sameColors.length - 1 ? " and " : ", "
        a(href=`/flags/${other.slug}/`)
          = other.name
      = "."
    else
      | This colour palette is unique to #{flag.name}.

    if similarColors.length > 0
      |  It is similar to
      for other, i in similarColors
        = i === 0 ? " " : i === similarColors.length - 1 ? " and " : ", "
        a(href=`/flags/${other.slug}/`)
          = other.name
      = "."

  pre
    code(style="white-space: pre-wrap; overflow-wrap: break-word;")
      != filters.highlight(content.toString(), "svg")

  section.fx.fxw.gap.pb3(
    style="justify-content: space-between;"
  )
      for width in [320, 160, 120, 80, 60, 40, 25, 20]
        a(href=`/assets/img/flags/recolored/${flag.slug}.svg`)
          img.flag(
            width=width
            src=`/assets/img/flags/recolored/${flag.slug}.svg`
          )

block append head
  style.
    .flag[data-type]::before {
      position: absolute;
      top: 0;
      left: 0;
      background: #fff;
      color: #023;
      padding: 2px 3px;
      font-size: 0.8rem;
      transition: opacity 300ms;
    }

    [data-type="source"]::before {
      content: "Source (Wikipedia)";
    }

    [data-type="recolored"]::before {
      content: "Redrawn";
    }

    .flag[data-type]:hover::before {
      opacity: 0;
    }

    dl {
      display: flex;
      gap: 0.5rem;
    }

    dd {
      margin-right: 0.5rem;
    }