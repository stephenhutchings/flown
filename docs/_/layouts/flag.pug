extends /_/layouts/default

include /_/mixins/color

block body
  - const ratio = flag.ratio.split(":").reduce((a, b) => a / b)

  section.pb3
    .head.fx.fxw.gap.mbe1
      h1.mbsa= flag.name.short

      if flag.name.official && flag.name.short !== flag.name.official
        small.mbsa= flag.name.official

      .misa.fx.gap
        if flag.a2
          code.code.nano.mba= flag.a2

        if flag.emoji
          span.emoji= flag.emoji

    if !flag.isValid
      .invalid.pb3
        :md
          Warning: This flag does not yet meet the criteria for this project, and will be redrawn. See the [list of incomplete flags](/todo).

        ul.mbs1
          for key in flag.errors
            li
              != "&times; "
              = errorCodes[key]

    .fx.pb2.gap
      each type in ["recolored"]
        a.flag(href=`/assets/img/flags/${type}/${flag.slug}.svg`)
          img(
            width=600
            src=`/assets/img/flags/${type}/${flag.slug}.svg`
          )

    .info.fxw
      dl
        dt Size
        dd
          if flag.size.output > 1024
            = (flag.size.output / 1024).toFixed(1)
            span.mt kB
          else
            = flag.size.output
            span.mt B

          if flag.size.source > flag.size.output
            span(title="Size reduction compared to source SVG").mt
              |  (#{(100 - flag.size.compression).toFixed(1)}% smaller)


        dt Distortion
        dd(title="Change in size from original ratio")
          if ratio === 3 / 5
            | 0
            span.mt %
          else if ratio > 3 / 5
            = (100 * (ratio / (3 / 5) - 1)).toFixed(1)
            span.mt % wider
          else
            = (100 * (1 - ratio / (3 / 5))).toFixed(1)
            span.mt % narrower

          span.mt
            |  (#{flag.ratio})


        dt Layers
        dd(title="Number of elements")
          = flag.elementCount

        dt Details
        dd
          a(href=flag.info target="_blank") Wikipedia

  if notes && notes[flag.slug]
    ul
      each note in notes[flag.slug]
        li= note

  if flag.tags.length
    section.pb3
      h2 Tags
      ul.fx.fxw.gap
        each tag in flag.tags
          li
            a(href=`/tags/${slugify(tag)}/`)
              = tag

  section.pb3
    h2 Palette
    if flag.colors
      ul.fx.fxw.gap
        each i in flag.colors
          li
            +color(palette[i])

    p.pb2
      if sameColors.length > 0
        | This colour palette is also used by
        for other, i in sameColors
          = i === 0 ? " " : i === sameColors.length - 1 ? " and " : ", "
          a(href=`/flags/${other.slug}/`)
            img.flag.inline(
              src=`/assets/img/flags/recolored/${other.slug}.svg`
            )
            = other.name.short
        = "."
      else
        | This colour palette is unique to #{flag.name.short}.

      if similarColors.length > 0
        |  It is similar to
        for other, i in similarColors
          = i === 0 ? " " : i === similarColors.length - 1 ? " and " : ", "
          a(href=`/flags/${other.slug}/`)
            img.flag.inline(
              src=`/assets/img/flags/recolored/${other.slug}.svg`
            )
            = other.name.short
        = "."

  //- if flag.details
    section.pb3
      h2 Detail

      each detail in flag.details
        - const [x, y, w, h] = detail.area
        - const f = 5 / 3

        .pb1
          p.mbe2= detail.note

          .fx.gap
            each type, i in ["recolored", "source"]
              - const src = `/assets/img/flags/${type}/${flag.slug}.svg`
              .detail(
                style={
                  "aspect-ratio": (f * (w / h)).toFixed(3),
                }
              )
                img(
                  src=src
                  style={
                    width: +(100 / w).toFixed(3) + "%",
                    height: +(100 / h).toFixed(3) + "%",
                    top: +(100 * -y / h).toFixed(3) + "%",
                    left: +(100 * -x / w).toFixed(3) + "%",
                    filter: i === 1 ? "saturate(0)" : null,
                  }
                )


  section.pb3
    h2 Difference

    p Compare the differences between this flag and the source artwork. White indicates similarity, while black shows where the flags differ. When the proportions differ, the flag can be resized and aligned in different ways. The score is computed from the average weighted difference between rendered pixels.

    form.fx.fxw.gap.pb2(
      data-component="image-diff"
      data-image-a=`/assets/img/flags/source/${flag.slug}.svg`
      data-image-b=`/assets/img/flags/recolored/${flag.slug}.svg`
    )
      .flag
        canvas.difference(width="600" height="360")
        canvas.inspector(width="600" height="360")

      .details.fx.fxc.gap
        .status
          strong Difference score&ensp;
          span.status-count Loading…

        if flag.ratio !== "3:5"
          .option-group.mbs2
            .option-name.mbe1
              strong Resize
            .option-list.fx.gap
              label(title="Ignore aspect ratio when resizing")
                input(type="radio" name="resize" value="stretch" checked)
                | &ensp;Stretch
              label(title="Expand to fill the space")
                input(type="radio" name="resize" value="cover")
                | &ensp;Cover
              label(title="Shrink to fit inside the space")
                input(type="radio" name="resize" value="contain")
                | &ensp;Contain
              label(title="Scale to match the area")
                input(type="radio" name="resize" value="balance")
                | &ensp;Balance

          .option-group.mbs1
            .option-name.mbe1
              strong Align
            .option-list.fx.gap
              - const hoist = flag.tags.includes("Canton")
              label(title="Align to the hoist side (left)")
                input(type="radio" name="align" value="hoist" checked=hoist)
                | &ensp;Hoist
              label(title="Align to the center")
                input(type="radio" name="align" value="center" checked=!hoist)
                | &ensp;Centre
              label(title="Align to the fly side (right)")
                input(type="radio" name="align" value="fly")
                | &ensp;Fly

        else
          p The source flag uses the standard 3:5 ratio. Resizing is not required.

        p.mbsa Hover over the image to compare flags in full colour.

  section.pb3
    h2 SVG Code
    pre
      - const svg = content.toString()
      - const snippet = svg.match(/^.{1000}[^"]{0,200}"?/)
      - const code = filters.highlight(svg, "svg")
      code(style="white-space: pre-wrap; overflow-wrap: break-word;")
        != snippet ? filters.highlight(snippet[0]+'…" />', "svg") : code
        if snippet
          button.more(data-component="replace" data-replace=code)
            | Expand

  section.pb3
    h2 Waterfall

    p See how this flag displays at different sizes.

    .fx.fxw.gap.pb2.jcsb
      for width in [320, 160, 120, 80, 60, 40, 25, 20]
        a.td0.nano.mt(href=`/assets/img/flags/recolored/${flag.slug}.svg`)
          img.flag.mbe1(
            width=width
            src=`/assets/img/flags/recolored/${flag.slug}.svg`
          )
          | #{width}&times;#{width/5*3}

block append head
  style
    include:sass /assets/sass/_flag.sass
